#!/usr/bin/env python3

import argparse
import os
import sys
import yaml

layer_dirs = [
    "00_install-config",
    os.path.join("01_cluster-mods", "manifests"),
    os.path.join("01_cluster-mods", "openshift"),
    "02_cluster-addons",
    "03_services"
]

def read_profiles(reqfile):
    """ Reads a YAML containing the installer information for each profile. """
    with open(reqfile, 'r') as fd:
        try:
            profiles = yaml.safe_load(fd)
        except yaml.YAMLError as e:
            sys.exit("Error parsing {0}: {1}".format(fd), e)
        if not profiles or not isinstance(profiles, dict):
            sys.exit("{0} is not a YAML object: {1}".format(fd, profiles))
        del profiles["kustomize"]
        return profiles

def touch(path):
    """ Touches a file. """
    with open(path, 'a'):
        os.utime(path, None)

def create_blueprint_layer(path):
    """ Creates the dirs of a single layer. """
    for d in layer_dirs:
        os.makedirs(os.path.join(path, d), exist_ok=True)
        touch(os.path.join(path, d, ".gitkeep"))

def create_blueprint_structure(root, profiles):
    """ Creates the 'base', 'profiles', and 'sites structure of a blueprint. """
    create_blueprint_layer(os.path.join(root, "base"))
    for profile in profiles.keys():
        create_blueprint_layer(os.path.join(root, "profiles", profile))

def create_kustomize_file(path, bases, patches, resources):
    """ Write a single kustomization.yaml. """
    kustomize_file = os.path.join(path, "kustomization.yaml")
    print("Writing {0}.".format(kustomize_file), file=sys.stderr)
    with open(kustomize_file, 'w') as fd:
        if bases and isinstance(bases, list) and len(bases) > 0:
            fd.write("bases:\n")
            for b in bases:
                fd.write("- {0}\n".format(b))
            fd.write("\n")
        if patches and isinstance(patches, list) and len(patches) > 0:
            fd.write("patches:\n")
            for p in patches:
                fd.write("- {0}\n".format(p))
            fd.write("\n")
        if resources and isinstance(resources, list) and len(resources) > 0:
            fd.write("resources:\n")
            for r in resources:
                fd.write("- {0}\n".format(r))
            fd.write("\n")

def create_kustomizations(path, profiles):
    """ Write kustomization.yaml for the blueprint. """
    create_kustomize_file(
        os.path.join(path, "base", "00_install-config"),
        [], [], ["install-config.yaml"])
    create_kustomize_file(
        os.path.join(path, "base", "01_cluster-mods"),
        [], [], [])
    create_kustomize_file(
        os.path.join(path, "base", "02_cluster-addons"),
        [], [], [])
    create_kustomize_file(
        os.path.join(path, "base", "03_services"),
        [], [], [])
    for profile in profiles.keys():
        create_kustomize_file(
            os.path.join(path, "profiles", profile, "00_install-config"),
            ["../../../base/00_install-config"], ["install-config.patch.yaml"], [])
        create_kustomize_file(
            os.path.join(path, "profiles", profile, "01_cluster-mods"),
            ["../../../base/01_cluster-mods"], [], [])
        create_kustomize_file(
            os.path.join(path, "profiles", profile, "02_cluster-addons"),
            ["../../../base/02_cluster-addons"], [], [])
        create_kustomize_file(
            os.path.join(path, "profiles", profile, "03_services"),
            ["../../../base/03_services"], [], [])

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate an empty blueprint with a set of profiles.')
    parser.add_argument('--requirements', type=str, required=True,
                        help='YAML file with requirements on installers (per profile) and kustomize.')
    parser.add_argument('--dir', type=str, required=True,
                        help='Directory to write blueprint to.')
    args = parser.parse_args()

    profiles = read_profiles(args.requirements)
    create_blueprint_structure(args.dir, profiles)
    create_kustomizations(args.dir, profiles)
