import collections
import os
import re
import subprocess
import uuid
import sys

var_regex = re.compile(r'\$\{([a-zA-Z0-9_-]+)\}')
var_regex_map = collections.OrderedDict()
var_regex_map["${AVAILABILITY_ZONE_A}"] = re.compile(r'\bus-east-2a\b')
var_regex_map["${AVAILABILITY_ZONE_B}"] = re.compile(r'\bus-east-2b\b')
var_regex_map["${AVAILABILITY_ZONE_C}"] = re.compile(r'\bus-east-2c\b')
var_regex_map["${AVAILABILITY_ZONE_D}"] = re.compile(r'\bus-east-2d\b')
var_regex_map["${AVAILABILITY_ZONE_E}"] = re.compile(r'\bus-east-2e\b')
var_regex_map["${AVAILABILITY_ZONE_F}"] = re.compile(r'\bus-east-2f\b')
var_regex_map["${REGION}"] = re.compile(r'\bus-east-2\b')
var_regex_map["${BASE_DOMAIN}"] = re.compile(r'aws.edge-sites.net\b')
var_regex_map["${CLUSTER_NAME}-00000"] = re.compile(r'\bsite-01-[a-zA-Z0-9]{5}\b')
var_regex_map["${CLUSTER_NAME}"] = re.compile(r'\bsite-01\b')
var_regex_map["${CLUSTER_ID}"] = re.compile(r'\b[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}\b')
var_regex_map["${AMI_ID}"] = re.compile(r'\bami-[a-z0-9]{17}\b')
var_regex_map["id: ${DNS_PUBLIC_ZONE}"] = re.compile(r'id: [A-Z0-9]{13}\b')
var_regex_map["${SSH_PUB_KEY}"] = re.compile(r'ssh-rsa AAAA[a-zA-Z0-9+=\/]* [a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+')
var_regex_map["kubeadmin: ${KUBEADMIN_KEY}"] = re.compile(r'kubeadmin: [a-zA-Z0-9]+$')
var_regex_map["ca.crt: (AUTOGENERATED)"] = re.compile(r'ca\.crt: \|[a-zA-Z0-9-+=\/\n ]+-----$', re.MULTILINE)
var_regex_map["ca-bundle.crt: (AUTOGENERATED)"] = re.compile(r'(ca-bundle\.crt: \|[a-zA-Z0-9-+=\/\n ]+-----)|(ca-bundle\.crt: \|\n    [a-zA-Z0-9-+=\/\n]+)$', re.MULTILINE)
var_regex_map["tls.crt: (AUTOGENERATED)"] = re.compile(r'tls\.crt: [a-zA-Z0-9+=\/\n ]+$', re.MULTILINE)
var_regex_map["tls.key: (AUTOGENERATED)"] = re.compile(r'tls\.key: [a-zA-Z0-9+=\/\n ]+$', re.MULTILINE)
var_regex_map["userData: (AUTOGENERATED)"] = re.compile(r'userData: [a-zA-Z0-9+=\/]+$')
var_regex_map[".dockerconfigjson: (AUTOGENERATED)"] = re.compile(r'\.dockerconfigjson: [a-zA-Z0-9+=\/]+$')

env_whitelist = ["HOME"]

def load(filepath):
    environment = {i: os.environ.get(i) for i in env_whitelist}
    with open(filepath, 'r') as f:
        for line in f:
            line = line.strip()
            if len(line) == 0 or line.startswith("#"):
                continue
            items = line.split("=", 1)
            if len(items) == 2:
                if items[1].startswith("$(") and items[1].endswith(")"):
                    command = render_vars(items[1][2:-1], environment)
                    items[1] = _run_command(command)
                environment[items[0]] = items[1]
    return environment

def _run_command(command):
    args = command.split()
    if args == []:
        return command
    elif args[0] == 'uuidgen':
        return str(uuid.uuid5(uuid.NAMESPACE_DNS, args[-1]))
    elif args[0] == 'cat':
        with open(args[-1], 'r') as f:
            return f.read().rstrip('\n,')
    else:
        return command
    # try:
    #     out = subprocess.check_output(command, shell=True)
    # except (subprocess.CalledProcessError, OSError) as e:
    #     sys.exit("Command {0} failed with {1}".format(command, e))
    # return out.decode('utf-8').strip(" \t\n\r")

def render_vars(value, environment):
    if isinstance(value, list):
        value = [render_vars(item, environment) for item in value]
    elif isinstance(value, str):
        match = var_regex.search(value)
        while match:
            value = value[:match.start()] + environment.get(match.group(1), match.group(1)) + value[match.end():]
            match = var_regex.search(value)
    else:
        sys.exit("Error: Called render_vars() on {0}.".format(value))
    return value

def templatize_vars(value):
    for k, v in var_regex_map.items():
        match = v.search(value)
        while match:
            value = value[:match.start()] + k + value[match.end():]
            match = v.search(value)
    return value
